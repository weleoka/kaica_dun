
    /**
     * Update the user in DB
     */
    public void updateUser()
    {
        boolean userFound = false;
        this.userDB.readCSVFull();
        String tmpName = this.selectedUser.getName();
        List<String[]> userList = this.userDB.readCSVFull();

        for (int i = 0; i < userList.size(); i++)
        {
            String[] userArr = userList.get(i);

            if (tmpName.equalsIgnoreCase(userArr[0]))
            {
                    userArr = this.selectedUser.toArray();
                    userList.set(i, userArr);
                    userFound = true;
                    break;
            }
        }

        if (userFound)
        {
            System.out.println("DEBUG: User found and updated.");
            this.userDB.writeCSVMultiLine(userList);
        }
    }

    /**
     * Print the entire user database to stdout.
     */
    public void printUserList()
    {
        List<String[]> userList = this.userDB.readCSVFull();

        for ( String[] user : userList)
        {

            for (String item : user)
            {
                System.out.println(item);
            }
        }
        System.out.println("==========================");
    }




    /**
     * Checks if authenticatedUser is set and returns result
     *
     * @return boolean              true if user is set and thus logged in
     */
    public boolean isAuthenticatedUser ()
    {

        if (this.authenticatedUser == null)
        {

            return false;
        }

        return true;
    }

    /**
     * return the ID of the selected user
     *
     * @return userID           true if user is set and thus logged in
     */
    public String getSelectedUserID ()
    {
        return this.selectedUser.getID();
    }


    /**
     * return the status of the selected user
     *
     * @return status           true if user is active else false
     */
    public boolean getSelectedUserStatus ()
    {
        return this.selectedUser.getStatus();
    }

    /**
     * return the status of the selected user
     *
     * @param status                boolean true if active
     */
    public void setSelectedUserStatus (boolean status)
    {
        this.selectedUser.setStatus(status);
        this.updateUser();
    }




    /**
     * setAuthenticated
     *
     * The selectedUser variable should already be set before this method is called.
     * This method implements a check that the supplied UserID matches the stored selectedUser.id.
     */
    public boolean loginSelectedUser(String userID)
    {
        //System.out.printf("'%s' VS '%s'", userID, this.selectedUser.getSelectedUserID()); //debug line.
        if (userID.equalsIgnoreCase(this.selectedUser.getID()))
        {
            this.authenticatedUser = this.selectedUser;

            return true;
        }

        return false;
    }

    /**
     * set authenticatedUser to null.
     */
    public void logoutSelectedUser()
    {
        this.authenticatedUser = null;
    }




    /**
     * Create a new user.
     *
     * todo: implement checks to make sure no duplicate users can be created.
     *
     * @param userName              a String of the new user name
     * @param userID                a string of the new user ID
     * @return boolean              true if user was created
     */
    public boolean createUser(String userName, String userID)
    {
        this.selectedUser = new User(userName, userID);
        this.userDB.writeCSVLine(this.selectedUser.toArray());

        return true;
